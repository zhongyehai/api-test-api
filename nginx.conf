
user  nginx;
worker_processes  1;

error_log  /test/api-test/error.log warn;  # 路径自定义
pid        /var/run/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       /usr/local/nginx/conf/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /test/api-test/access.log  main;  # 路径自定义

    sendfile        on;
    #tcp_nopush     on;

    keepalive_timeout  65;

	# 开启gzip
	gzip  on;
	# 启用gzip压缩的最小文件，小于设置值的文件将不会压缩
	gzip_min_length 1k;
	# gzip 压缩级别，1-10，数字越大压缩的越好，也越占用CPU时间。一般设置1和2
	gzip_comp_level 4;
	gzip_static on;#是否开启gzip静态资源
	# 进行压缩的文件类型。javascript有多种形式。其中的值可以在 mime.types 文件中找到。
	gzip_types text/plain application/javascript application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png;
	# 是否在http header中添加Vary: Accept-Encoding，建议开启
	gzip_vary on;
	# 禁用IE 6 gzip
	gzip_disable "MSIE [1-6]\.";
	# 设置缓存路径并且使用一块最大100M的共享内存，用于硬盘上的文件索引，包括文件名和请求次数，每个文件在1天内若不活跃（无请求）则从硬盘上淘汰，硬盘缓存最大10G，满了则根据LRU算法自动清除缓存。
	proxy_cache_path /home/nginx levels=1:2 keys_zone=imgcache:100m inactive=1d max_size=10g;


    #include /etc/nginx/conf.d/*.conf;
	server {
		listen 80;  # nginx监听端口
		server_name api-test;
		charset utf-8;
		client_max_body_size 75M;

        # /开头的请求的转发地址
		location / {
			root /test/api-test/front/;  # 前端dist包的位置
			index index.html;
		}

        # /api开头的请求的转发地址
		location ^~ /api{
			proxy_pass http://139.196.100.202:8024/api;  # 此处需写明ip地址，用127.0.0.1时无效
		}

		location /files {
			alias /home/files/;
			autoindex on;
		}
	}
}
